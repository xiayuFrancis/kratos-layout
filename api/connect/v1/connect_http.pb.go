// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.7.1
// source: api/connect/v1/connect.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "kratosdemo/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConnectTestConnect = "/api.connect.v1.Connect/TestConnect"

type ConnectHTTPServer interface {
	// TestConnect TestConnect 测试连接接口
	TestConnect(context.Context, *TestConnectRequest) (*v1.Response, error)
}

func RegisterConnectHTTPServer(s *http.Server, srv ConnectHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/connect/test", _Connect_TestConnect0_HTTP_Handler(srv))
}

func _Connect_TestConnect0_HTTP_Handler(srv ConnectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TestConnectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConnectTestConnect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestConnect(ctx, req.(*TestConnectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.Response)
		return ctx.Result(200, reply)
	}
}

type ConnectHTTPClient interface {
	TestConnect(ctx context.Context, req *TestConnectRequest, opts ...http.CallOption) (rsp *v1.Response, err error)
}

type ConnectHTTPClientImpl struct {
	cc *http.Client
}

func NewConnectHTTPClient(client *http.Client) ConnectHTTPClient {
	return &ConnectHTTPClientImpl{client}
}

func (c *ConnectHTTPClientImpl) TestConnect(ctx context.Context, in *TestConnectRequest, opts ...http.CallOption) (*v1.Response, error) {
	var out v1.Response
	pattern := "/v1/connect/test"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConnectTestConnect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
